exportPattern("^[[:alpha:]]+")

S3method(boot, gsm)
S3method(coef, gsm)
S3method(cooks.distance, gsm)
S3method(deviance, gsm)
S3method(dfbeta, gsm)
S3method(dfbetas, gsm)
S3method(family, gsm)
S3method(fitted, gsm)
S3method(hatvalues, gsm)
S3method(influence, gsm)
S3method(model.matrix, gsm)
S3method(predict, gsm)
S3method(residuals, gsm)
S3method(rstandard, gsm)
S3method(rstudent, gsm)
S3method(summary, gsm)
S3method(print, gsm)
S3method(print, summary.gsm)
S3method(print, boot.gsm)
S3method(vcov, gsm)
S3method(weights, gsm)

S3method(boot, sm)
S3method(coef, sm)
S3method(cooks.distance, sm)
S3method(deviance, sm)
S3method(dfbeta, sm)
S3method(dfbetas, sm)
S3method(fitted, sm)
S3method(hatvalues, sm)
S3method(influence, sm)
S3method(model.matrix, sm)
S3method(residuals, sm)
S3method(rstandard, sm)
S3method(rstudent, sm)
S3method(predict, sm)
S3method(summary, sm)
S3method(print, sm)
S3method(print, summary.sm)
S3method(print, boot.sm)
S3method(vcov, sm)
S3method(weights, sm)

S3method(boot, ss)
S3method(coef, ss)
S3method(cooks.distance, ss)
S3method(deviance, ss)
S3method(dfbeta, ss)
S3method(dfbetas, ss)
S3method(fitted, ss)
S3method(hatvalues, ss)
S3method(influence, ss)
S3method(model.matrix, ss)
S3method(plot, ss)
S3method(plot, boot.ss)
S3method(predict, ss)
S3method(residuals, ss)
S3method(rstandard, ss)
S3method(rstudent, ss)
S3method(summary, ss)
S3method(print, ss)
S3method(print, summary.ss)
S3method(print, boot.ss)
S3method(vcov, ss)
S3method(weights, ss)

importFrom("grDevices", "as.graphicsAnnot", "col2rgb", "colorRampPalette", "devAskNewPage", "dev.flush", "dev.hold", "dev.interactive", "extendrange", "rainbow", "rgb")

importFrom("graphics", "abline", "axis", "box", "legend", "lines", "lines.default", "mtext", "panel.smooth", "par", "plot.default", "points", "polygon", "strheight", "strwidth", "text", "title")

importFrom("stats", ".nknots.smspl", "approx", "as.formula", "coef", "cor", "cov", "cooks.distance", "covratio", "deviance", "dbinom", "dist",  "dfbeta", "dfbetas", "dffits", "dgamma", "dnorm", "dpois", "family", "fitted", "gaussian", "hatvalues", "influence", "influence.measures", "IQR", "make.link", "model.frame", "model.matrix", "model.response", "na.pass", "na.omit", "nlm", "optimize", "pchisq", "pf", "pnorm", "poisson", "predict", "pt", "qnorm", "qqnorm", "quantile", "rbinom", "residuals", "rgamma", "rnbinom", "rnorm", "rpois", "rstandard", "rstudent", "sd", "symnum", "var", "vcov", "weighted.residuals", "weights")

importFrom("utils", "head", "setTxtProgressBar", "txtProgressBar")